/* styles.css */

.oval-button {
    background-color: #3498db;
    /* Blue background */
    border: none;
    color: white;
    padding: 10px 20px;
    /* More padding */
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    cursor: pointer;
    border-radius: 25px;
    transition: background-color 0.3s, transform 0.3s;
}

.oval-button:hover {
    background-color: #2980b9;
    /* Darker blue on hover */
    transform: translateY(-2px);
    /* Slight lift effect */
}

body {
    font-family: Arial, sans-serif;
}

#tree {
    width: 100%;
    height: 85.5vh;
    border: 1px solid #ccc;
}

#controls {
    margin: 10px;
}

header {
    background-color: #d0c18c;
    /* Match the header background color */
    padding: 10px 20px;
    /* Add padding to the header */
    display: flex;
    /* Use flexbox for header layout */
    justify-content: space-between;
    /* Space out title and nav links */
    align-items: center;
    /* Center align items vertically */
}

header nav ul {
    list-style-type: none;
    padding: 0;
    display: flex;
    gap: 15px;
    margin: 0;
    /* Remove default margin */
}

header nav ul li {
    display: inline-block;
}

header nav ul li a {
    text-decoration: none;
    padding: 10px 0;
    /* Padding for better spacing */
    color: #000;
    /* Black text */
    font-size: 16px;
    /* Font size */
    font-weight: bold;
    /* Bold text for better visibility */
    transition: color 0.3s, text-decoration 0.3s;
    /* Smooth transition for hover effect */
}

header nav ul li a:hover {
    color: #444;
    /* Darker grey text on hover */
    text-decoration: underline;
    /* Underline text on hover */
}

header nav ul li a.active {
    text-decoration: underline;
    /* Underline text for active page */
}

header h1 {
    color: #000;
    /* Black text for the header title */
    font-size: 24px;
    /* Font size for the header title */
    font-weight: bold;
    /* Bold text for the header title */
    margin: 0;
    /* Remove default margin */
}

.form-container {
    position: absolute;
    top: 20px;
    right: 20px;
    background: white;
    padding: 10px;
    border-radius: 5px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
    z-index: 1000;
    /* Ensure the form is on top of the map */
}

.orgchart .node img {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    margin-right: 10px;
}

.node.female rect {
    fill: #fdb0c0;
}

.node.male rect {
    fill: #ADD8E6;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 20px;
    background-color: #f4f4f4;
}

.container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 10px;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
}

.kingdom-filters {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 20px;
}

.kingdom-filters label {
    display: flex;
    align-items: center;
    padding: 10px;
    border-radius: 5px;
    background-color: #f9f9f9;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: background-color 0.3s;
    cursor: pointer;
    user-select: none;
}

.kingdom-filters label:hover {
    background-color: #e2e2e2;
}

.kingdom-filters input[type="checkbox"] {
    margin-right: 8px;
    width: 16px;
    height: 16px;
    accent-color: #3498db;
    cursor: pointer;
}

.select-all-container {
    margin-bottom: 10px;
    display: flex;
    align-items: center;
}

.select-all-container label {
    font-weight: bold;
    margin-left: 8px;
    cursor: pointer;
}

.timeline {
    position: relative;
}

.timeline-item {
    background: #fff;
    padding: 15px;
    margin: 10px 0;
    border-left: 4px solid #3498db;
    position: relative;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
    border-radius: 4px;
    transition: transform 0.3s, box-shadow 0.3s;
}

.timeline-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}

.timeline-item::before {
    content: "";
    position: absolute;
    left: -8px;
    top: 20px;
    width: 12px;
    height: 12px;
    background: #3498db;
    border-radius: 50%;
}

.timeline-item h3 {
    margin: 0 0 5px;
}

.timeline-item p {
    margin: 5px 0 0;
    color: #666;
}

document.addEventListener('DOMContentLoaded', () => {
    const timelineData = <?php echo json_encode($timeline_data); ?>;
    const timelineWrapper = document.getElementById('timeline-wrapper');
    const filterContainer = document.querySelector('.kingdom-filters');
    const colorLegendContainer = document.querySelector('.color-legend');
    const selectAllCheckbox = document.getElementById('select-all');

    let minYearSelected = null; // เก็บค่าต่ำสุดของ reignstart ที่ถูกเลือก

    function renderCheckboxes() {
        const kingdoms = [...new Set(timelineData.map(item => item.kingdomname))];
        kingdoms.forEach((kingdom, index) => {
            const label = document.createElement('label');
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.value = kingdom;
            checkbox.checked = true;
            checkbox.id = `kingdom-${index}`;
            checkbox.addEventListener('change', debounce(handleCheckboxChange, 300));

            label.setAttribute('for', checkbox.id);
            label.appendChild(checkbox);
            label.appendChild(document.createTextNode(kingdom));
            filterContainer.appendChild(label);

            const legendItem = document.createElement('div');
            legendItem.style.display = 'flex';
            legendItem.style.alignItems = 'center';
            legendItem.style.marginRight = '20px';
            legendItem.style.fontSize = '16px';
            legendItem.style.fontWeight = 'bold';
            legendItem.style.textAlign = 'center';
            legendItem.innerHTML = `
                <div style="background-color: ${getColorForKingdom(kingdom)}; width: 20px; height: 20px; border-radius: 50%;"></div>
                <span style="margin-left: 10px;">${kingdom}</span>
            `;
            colorLegendContainer.appendChild(legendItem);
        });

        selectAllCheckbox.checked = true;

        selectAllCheckbox.addEventListener('change', (e) => {
            const isChecked = e.target.checked;
            document.querySelectorAll('.kingdom-filters input[type=checkbox]').forEach(checkbox => {
                checkbox.checked = isChecked;
            });
            renderTimeline();
        });
    }

    function handleCheckboxChange() {
        const allCheckboxes = document.querySelectorAll('.kingdom-filters input[type=checkbox]');
        const allChecked = Array.from(allCheckboxes).every(checkbox => checkbox.checked);
        selectAllCheckbox.checked = allChecked;

        renderTimeline();
    }

    function renderTimeline() {
        timelineWrapper.innerHTML = '';
        const selectedKingdoms = Array.from(document.querySelectorAll('.kingdom-filters input[type=checkbox]'))
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.value);

        const filteredData = timelineData.filter(item =>
            item.reignstart !== null && selectedKingdoms.includes(item.kingdomname)
        );

        if (filteredData.length === 0) {
            return; // ถ้าไม่มีข้อมูลที่เลือก ไม่ต้องทำอะไรต่อ
        }

        // อัปเดตค่าต่ำสุดที่ถูกเลือก เฉพาะข้อมูลที่ถูกกรอง
        minYearSelected = Math.min(...filteredData.map(item => item.reignstart));

        filteredData.sort((a, b) => a.reignstart - b.reignstart);

        const allYears = filteredData.flatMap(item => [item.reignstart, item.reignend]);
        const minYear = Math.min(...allYears);
        const maxYear = Math.max(...allYears);

        // Render year labels
        renderYearLabels(minYear, maxYear);

        const timelineItems = document.createElement('div');
        timelineItems.classList.add('timeline-items');

        const kingdoms = [...new Set(filteredData.map(item => item.kingdomname))];
        kingdoms.forEach((kingdom, index) => {
            const rowDiv = document.createElement('div');
            rowDiv.classList.add('timeline-items');
            rowDiv.style.marginBottom = '60px';
            rowDiv.style.paddingTop = '30px';
            rowDiv.style.position = 'relative';

            const kingdomLabel = document.createElement('div');
            kingdomLabel.classList.add('kingdom-label');
            kingdomLabel.textContent = kingdom;
            kingdomLabel.style.position = 'absolute';
            kingdomLabel.style.left = '0px';
            kingdomLabel.style.top = '50%';
            kingdomLabel.style.transform = 'translateY(-50%)';
            kingdomLabel.style.fontWeight = 'bold';
            kingdomLabel.style.fontSize = '18px';
            kingdomLabel.style.color = '#333';

            rowDiv.appendChild(kingdomLabel);

            const items = filteredData.filter(item => item.kingdomname === kingdom);
            items.forEach(item => {
                const itemDiv = document.createElement('div');
                itemDiv.classList.add('timeline-item');
                itemDiv.style.left = `${getPositionLeft(item.reignstart)}px`;
                itemDiv.style.width = `${getWidth(item.reignstart, item.reignend)}px`;
                itemDiv.style.backgroundColor = getColorForKingdom(item.kingdomname);

                itemDiv.innerHTML = `
                    <h3>${item.name}</h3>
                    <p>${item.kingdomname}</p>
                    <p>พ.ศ. ${item.reignstart} - พ.ศ. ${item.reignend}</p>
                `;

                itemDiv.addEventListener('mouseenter', () => {
                    itemDiv.style.zIndex = '999';
                });

                itemDiv.addEventListener('mouseleave', () => {
                    itemDiv.style.zIndex = '1';
                });

                rowDiv.appendChild(itemDiv);
            });

            timelineItems.appendChild(rowDiv);
        });

        timelineWrapper.appendChild(timelineItems);
    }

    function renderYearLabels(minYear, maxYear) {
        const yearContainer = document.createElement('div');
        yearContainer.classList.add('year-labels');
        yearContainer.style.position = 'relative';
        yearContainer.style.height = '40px'; // Set height for the year labels
        yearContainer.style.marginBottom = '20px'; // Space between year labels and timeline
        
        for (let year = minYear; year <= maxYear; year += 10) { // Display every 10 years
            const yearDiv = document.createElement('div');
            yearDiv.textContent = `พ.ศ. ${year}`;
            yearDiv.style.position = 'absolute';
            yearDiv.style.left = `${getPositionLeft(year)}px`;
            yearDiv.style.transform = 'translateX(-50%)'; // Center the year text
            yearDiv.style.fontWeight = 'bold';
            yearDiv.style.fontSize = '14px';

            yearContainer.appendChild(yearDiv);
        }

        timelineWrapper.appendChild(yearContainer);
    }

    // ปรับตำแหน่งให้สัมพันธ์กับปีเริ่มต้นต่ำสุดที่ถูกเลือก
    function getPositionLeft(year) {
        const yearWidth = 150;
        return (year - minYearSelected) * yearWidth;
    }

    function getWidth(startYear, endYear) {
        const yearWidth = 150;
        return (endYear - startYear + 1) * yearWidth;
    }

    function getColorForKingdom(kingdom) {
        const colors = [
            "#FFA07A", "#DDA0DD", "#88B04B", "#F5DEB3", "#92A8D1", "#F6C3C1", "#FFCC00",
            "#C39BD3", "#76D7C4", "#F1948A", "#F7DC6F", "#85C1E9", "#D5DBDB", "#48C9B0",
            "#AF7AC5", "#5499C7", "#F0B27A", "#1ABC9C", "#A569BD", "#DC7633"
        ];
        const kingdoms = [...new Set(timelineData.map(item => item.kingdomname))];
        const index = kingdoms.indexOf(kingdom);
        return colors[index % colors.length];
    }

    function debounce(func, delay) {
        let timeout;
        return (...args) => {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), delay);
        };
    }

    renderCheckboxes();
    renderTimeline();
});







document.addEventListener('DOMContentLoaded', () => {
    const timelineData = <?php echo json_encode($timeline_data); ?>;
    const timelineWrapper = document.getElementById('timeline-wrapper');
    const filterContainer = document.querySelector('.kingdom-filters');
    const colorLegendContainer = document.querySelector('.color-legend');
    const selectAllCheckbox = document.getElementById('select-all');

    function renderCheckboxes() {
        const kingdoms = [...new Set(timelineData.map(item => item.kingdomname))];
        kingdoms.forEach((kingdom, index) => {
            const label = document.createElement('label');
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.value = kingdom;
            checkbox.checked = true;
            checkbox.id = `kingdom-${index}`;
            checkbox.addEventListener('change', debounce(handleCheckboxChange, 300));

            label.setAttribute('for', checkbox.id);
            label.appendChild(checkbox);
            label.appendChild(document.createTextNode(kingdom));
            filterContainer.appendChild(label);

            const legendItem = document.createElement('div');
            legendItem.style.display = 'flex';
            legendItem.style.alignItems = 'center';
            legendItem.style.marginRight = '20px';
            legendItem.style.fontSize = '16px';
            legendItem.style.fontWeight = 'bold';
            legendItem.style.textAlign = 'center';
            legendItem.innerHTML = `
                <div style="background-color: ${getColorForKingdom(kingdom)}; width: 20px; height: 20px; border-radius: 50%;"></div>
                <span style="margin-left: 10px;">${kingdom}</span>
            `;
            colorLegendContainer.appendChild(legendItem);
        });

        selectAllCheckbox.checked = true;

        selectAllCheckbox.addEventListener('change', (e) => {
            const isChecked = e.target.checked;
            document.querySelectorAll('.kingdom-filters input[type=checkbox]').forEach(checkbox => {
                checkbox.checked = isChecked;
            });
            renderTimeline();
        });
    }

    function handleCheckboxChange() {
        const allCheckboxes = document.querySelectorAll('.kingdom-filters input[type=checkbox]');
        const allChecked = Array.from(allCheckboxes).every(checkbox => checkbox.checked);
        selectAllCheckbox.checked = allChecked;

        renderTimeline();
    }

    function renderTimeline() {
        timelineWrapper.innerHTML = '';
        const selectedKingdoms = Array.from(document.querySelectorAll('.kingdom-filters input[type=checkbox]'))
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.value);

        const filteredData = timelineData.filter(item =>
            item.reignstart !== null && selectedKingdoms.includes(item.kingdomname)
        );

        if (filteredData.length === 0) {
            return;
        }

        // หา reignstart ที่น้อยที่สุดจากข้อมูลที่ถูกกรอง
        const allYears = filteredData.flatMap(item => [item.reignstart, item.reignend]);
        const minYearSelected = Math.min(...filteredData.map(item => item.reignstart));
        const maxYear = Math.max(...allYears);

        filteredData.sort((a, b) => a.reignstart - b.reignstart);

        // อัพเดต year labels ตาม minYearSelected
        renderYearLabels(minYearSelected, maxYear);

        const timelineItems = document.createElement('div');
        timelineItems.classList.add('timeline-items');

        const kingdoms = [...new Set(filteredData.map(item => item.kingdomname))];
        kingdoms.forEach((kingdom, index) => {
            const rowDiv = document.createElement('div');
            rowDiv.classList.add('timeline-items');
            rowDiv.style.marginBottom = '80px';
            rowDiv.style.paddingTop = '30px';
            rowDiv.style.position = 'relative';

            const kingdomLabel = document.createElement('div');
            kingdomLabel.classList.add('kingdom-label');
            kingdomLabel.textContent = kingdom;
            kingdomLabel.style.position = 'absolute';
            kingdomLabel.style.left = '0px';
            kingdomLabel.style.top = '50%';
            kingdomLabel.style.transform = 'translateY(-50%)';
            kingdomLabel.style.fontWeight = 'bold';
            kingdomLabel.style.fontSize = '18px';
            kingdomLabel.style.color = '#333';

            rowDiv.appendChild(kingdomLabel);

            const items = filteredData.filter(item => item.kingdomname === kingdom);
            items.forEach(item => {
                const itemDiv = document.createElement('div');
                itemDiv.classList.add('timeline-item');
                itemDiv.style.left = `${getPositionLeft(item.reignstart, minYearSelected)}px`;
                itemDiv.style.width = `${getWidth(item.reignstart, item.reignend)}px`;
                itemDiv.style.backgroundColor = getColorForKingdom(item.kingdomname);

                itemDiv.innerHTML = `
                    <h3>${item.name}</h3>
                    <p>${item.kingdomname}</p>
                    <p>พ.ศ. ${item.reignstart} - พ.ศ. ${item.reignend}</p>
                `;

                itemDiv.addEventListener('mouseenter', () => {
                    itemDiv.style.zIndex = '999';
                });

                itemDiv.addEventListener('mouseleave', () => {
                    itemDiv.style.zIndex = '1';
                });

                rowDiv.appendChild(itemDiv);
            });

            timelineItems.appendChild(rowDiv);
        });

        timelineWrapper.appendChild(timelineItems);
    }

    // Adjust renderYearLabels to start from minYearSelected
    function renderYearLabels(minYear, maxYear) {
        const yearContainer = document.createElement('div');
        yearContainer.classList.add('year-labels');
        yearContainer.style.position = 'relative';
        yearContainer.style.height = '40px';
        yearContainer.style.marginBottom = '20px';

        const yearWidth = 60; // Display each year with 60px width
        for (let year = minYear; year <= maxYear; year += 10) { // Show every 10 years
            const yearDiv = document.createElement('div');
            yearDiv.textContent = `พ.ศ. ${year}`;
            yearDiv.style.position = 'absolute';
            yearDiv.style.left = `${getPositionLeft(year, minYear)}px`;
            yearDiv.style.transform = 'translateX(50%)';
            yearDiv.style.fontWeight = 'bold';
            yearDiv.style.fontSize = '14px';

            yearContainer.appendChild(yearDiv);
        }

        timelineWrapper.appendChild(yearContainer);
    }

    function getPositionLeft(year, minYear) {
        const yearWidth = 150; // Define how wide each year is represented
        return (year - minYear) * yearWidth;
    }

    function getWidth(startYear, endYear) {
        const yearWidth = 150;
        return (endYear - startYear + 1) * yearWidth;
    }

    function getColorForKingdom(kingdom) {
        const colors = [
            "#FFA07A", "#DDA0DD", "#88B04B", "#F5DEB3", "#92A8D1", "#F6C3C1", "#FFCC00",
            "#C39BD3", "#76D7C4", "#F1948A", "#F7DC6F", "#85C1E9", "#D5DBDB", "#48C9B0",
            "#AF7AC5", "#5499C7", "#F0B27A", "#1ABC9C", "#A569BD", "#DC7633"
        ];
        const kingdoms = [...new Set(timelineData.map(item => item.kingdomname))];
        const index = kingdoms.indexOf(kingdom);
        return colors[index % colors.length];
    }

    function debounce(func, delay) {
        let timeout;
        return (...args) => {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), delay);
        };
    }

    renderCheckboxes();
    renderTimeline();
});







//ver. แรก
document.addEventListener('DOMContentLoaded', () => {
    const timelineData = <?php echo json_encode($timeline_data); ?>;
    const timelineWrapper = document.getElementById('timeline-wrapper');
    const filterContainer = document.querySelector('.kingdom-filters');
    const colorLegendContainer = document.querySelector('.color-legend');
    const selectAllCheckbox = document.getElementById('select-all');

    function renderCheckboxes() {
        const kingdoms = [...new Set(timelineData.map(item => item.kingdomname))];
        kingdoms.forEach((kingdom, index) => {
            const label = document.createElement('label');
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.value = kingdom;
            checkbox.checked = true;
            checkbox.id = `kingdom-${index}`;
            checkbox.addEventListener('change', debounce(handleCheckboxChange, 300));

            label.setAttribute('for', checkbox.id);
            label.appendChild(checkbox);
            label.appendChild(document.createTextNode(kingdom));
            filterContainer.appendChild(label);

            const legendItem = document.createElement('div');
            legendItem.style.display = 'flex';
            legendItem.style.alignItems = 'center';
            legendItem.style.marginRight = '20px';
            legendItem.style.fontSize = '16px';
            legendItem.style.fontWeight = 'bold';
            legendItem.style.textAlign = 'center';
            legendItem.innerHTML = `
        <div style="background-color: ${getColorForKingdom(kingdom)}; width: 20px; height: 20px; border-radius: 50%;"></div>
        <span style="margin-left: 10px;">${kingdom}</span>
    `;
            colorLegendContainer.appendChild(legendItem);
        });

        selectAllCheckbox.checked = true;

        selectAllCheckbox.addEventListener('change', (e) => {
            const isChecked = e.target.checked;
            document.querySelectorAll('.kingdom-filters input[type=checkbox]').forEach(checkbox => {
                checkbox.checked = isChecked;
            });
            renderTimeline();
        });
    }

    function handleCheckboxChange() {
        const allCheckboxes = document.querySelectorAll('.kingdom-filters input[type=checkbox]');
        const allChecked = Array.from(allCheckboxes).every(checkbox => checkbox.checked);
        selectAllCheckbox.checked = allChecked;

        renderTimeline();
    }

    function renderTimeline() {
        timelineWrapper.innerHTML = '';
        const selectedKingdoms = Array.from(document.querySelectorAll('.kingdom-filters input[type=checkbox]'))
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.value);

        const filteredData = timelineData.filter(item =>
            item.reignstart !== null && selectedKingdoms.includes(item.kingdomname)
        );

        filteredData.sort((a, b) => a.reignstart - b.reignstart);

        const allYears = filteredData.flatMap(item => [item.reignstart, item.reignend]);
        const minYear = Math.min(...allYears);
        const maxYear = Math.max(...allYears);

        // Render year labels
        renderYearLabels(minYear, maxYear);

        const timelineItems = document.createElement('div');
        timelineItems.classList.add('timeline-items');

        const kingdoms = [...new Set(filteredData.map(item => item.kingdomname))];
        kingdoms.forEach((kingdom, index) => {
            const rowDiv = document.createElement('div');
            rowDiv.classList.add('timeline-items');
            rowDiv.style.marginBottom = '60px';
            rowDiv.style.paddingTop = '30px';
            rowDiv.style.position = 'relative';

            const kingdomLabel = document.createElement('div');
            kingdomLabel.classList.add('kingdom-label');
            kingdomLabel.textContent = kingdom;
            kingdomLabel.style.position = 'absolute';
            kingdomLabel.style.left = '0px';
            kingdomLabel.style.top = '50%';
            kingdomLabel.style.transform = 'translateY(-50%)';
            kingdomLabel.style.fontWeight = 'bold';
            kingdomLabel.style.fontSize = '18px';
            kingdomLabel.style.color = '#333';

            rowDiv.appendChild(kingdomLabel);

            const items = filteredData.filter(item => item.kingdomname === kingdom);
            items.forEach(item => {
                const itemDiv = document.createElement('div');
                itemDiv.classList.add('timeline-item');
                itemDiv.style.left = `${getPositionLeft(item.reignstart)}px`;
                itemDiv.style.width = `${getWidth(item.reignstart, item.reignend)}px`;
                itemDiv.style.backgroundColor = getColorForKingdom(item.kingdomname);

                itemDiv.innerHTML = `
            <h3>${item.name}</h3>
            <p>${item.kingdomname}</p>
            <p>พ.ศ. ${item.reignstart} - พ.ศ. ${item.reignend}</p>
        `;

                itemDiv.addEventListener('mouseenter', () => {
                    itemDiv.style.zIndex = '999';
                });

                itemDiv.addEventListener('mouseleave', () => {
                    itemDiv.style.zIndex = '1';
                });

                rowDiv.appendChild(itemDiv);
            });

            timelineItems.appendChild(rowDiv);
        });

        timelineWrapper.appendChild(timelineItems);
    }

    // New function to render year labels
    function renderYearLabels(minYear, maxYear) {
        const yearContainer = document.createElement('div');
        yearContainer.classList.add('year-labels');
        yearContainer.style.position = 'relative';
        yearContainer.style.height = '40px'; // Set height for the year labels
        yearContainer.style.marginBottom = '20px'; // Space between year labels and timeline

        const yearWidth = 60; // Width per year
        for (let year = minYear; year <= maxYear; year += 10) { // Display every 10 years
            const yearDiv = document.createElement('div');
            yearDiv.textContent = `พ.ศ. ${year}`;
            yearDiv.style.position = 'absolute';
            yearDiv.style.left = `${getPositionLeft(year)}px`;
            yearDiv.style.transform = 'translateX(-50%)'; // Center the year text
            yearDiv.style.fontWeight = 'bold';
            yearDiv.style.fontSize = '14px';

            yearContainer.appendChild(yearDiv);
        }

        timelineWrapper.appendChild(yearContainer);
    }

    function getPositionLeft(year) {
        const baseYear = 608;
        const yearWidth = 150;
        return (year - baseYear) * yearWidth;
    }

    function getWidth(startYear, endYear) {
        const yearWidth = 150;
        return (endYear - startYear + 1) * yearWidth;
    }

    function getColorForKingdom(kingdom) {
        const colors = [
            "#FFA07A", "#DDA0DD", "#88B04B", "#F5DEB3", "#92A8D1", "#F6C3C1", "#FFCC00",
            "#C39BD3", "#76D7C4", "#F1948A", "#F7DC6F", "#85C1E9", "#D5DBDB", "#48C9B0",
            "#AF7AC5", "#5499C7", "#F0B27A", "#1ABC9C", "#A569BD", "#DC7633"
        ];
        const kingdoms = [...new Set(timelineData.map(item => item.kingdomname))];
        const index = kingdoms.indexOf(kingdom);
        return colors[index % colors.length];
    }

    function debounce(func, delay) {
        let timeout;
        return (...args) => {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), delay);
        };
    }

    renderCheckboxes();
    renderTimeline();
});














<body>
    <header>
        <h1>Timeline</h1>
        <nav>
            <ul>
                <li><a href="index.php">Home</a></li>
                <li><a href="family_tree.php">Family Tree</a></li>
                <li><a href="timeline.php" class="active">Timeline</a></li>
            </ul>
        </nav>
    </header>
    <div class="container">
        <div class="select-all-container">
            <input type="checkbox" id="select-all" checked>
            <label for="select-all">เลือกทั้งหมด</label>
        </div>
        <div class="kingdom-filters">
            <!-- Checkboxes for kingdoms will be dynamically generated here -->
        </div>
        <div class="color-legend">
            <!-- Legend will be dynamically generated here -->
        </div>
        <div class="timeline-wrapper" id="timeline-wrapper">
            <!-- Timeline rows will be generated here by JavaScript -->
        </div>
    </div>


    <script>
        document.addEventListener('DOMContentLoaded', () => {
    const timelineData = <?php echo json_encode($timeline_data); ?>;
    const timelineWrapper = document.getElementById('timeline-wrapper');
    const filterContainer = document.querySelector('.kingdom-filters');
    const colorLegendContainer = document.querySelector('.color-legend');
    const selectAllCheckbox = document.getElementById('select-all');

    function renderCheckboxes() {
        const kingdoms = [...new Set(timelineData.map(item => item.kingdomname))];
        kingdoms.forEach((kingdom, index) => {
            const label = document.createElement('label');
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.value = kingdom;
            checkbox.checked = true;
            checkbox.id = `kingdom-${index}`;
            checkbox.addEventListener('change', debounce(handleCheckboxChange, 300));

            label.setAttribute('for', checkbox.id);
            label.appendChild(checkbox);
            label.appendChild(document.createTextNode(kingdom));
            filterContainer.appendChild(label);

            const legendItem = document.createElement('div');
            legendItem.style.display = 'flex';
            legendItem.style.alignItems = 'center';
            legendItem.style.marginRight = '20px';
            legendItem.style.fontSize = '16px';
            legendItem.style.fontWeight = 'bold';
            legendItem.style.textAlign = 'center';
            legendItem.innerHTML = `
                <div style="background-color: ${getColorForKingdom(kingdom)}; width: 20px; height: 20px; border-radius: 50%;"></div>
                <span style="margin-left: 10px;">${kingdom}</span>
            `;
            colorLegendContainer.appendChild(legendItem);
        });

        selectAllCheckbox.checked = true;

        selectAllCheckbox.addEventListener('change', (e) => {
            const isChecked = e.target.checked;
            document.querySelectorAll('.kingdom-filters input[type=checkbox]').forEach(checkbox => {
                checkbox.checked = isChecked;
            });
            renderTimeline();
        });
    }

    function handleCheckboxChange() {
        const allCheckboxes = document.querySelectorAll('.kingdom-filters input[type=checkbox]');
        const allChecked = Array.from(allCheckboxes).every(checkbox => checkbox.checked);
        selectAllCheckbox.checked = allChecked;

        renderTimeline();
    }

    function renderTimeline() {
        timelineWrapper.innerHTML = '';
        const selectedKingdoms = Array.from(document.querySelectorAll('.kingdom-filters input[type=checkbox]'))
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.value);

        const filteredData = timelineData.filter(item =>
            item.reignstart !== null && selectedKingdoms.includes(item.kingdomname)
        );

        if (filteredData.length === 0) {
            return;
        }

        // หา reignstart ที่น้อยที่สุดจากข้อมูลที่ถูกกรอง
        const allYears = filteredData.flatMap(item => [item.reignstart, item.reignend]);
        const minYearSelected = Math.min(...filteredData.map(item => item.reignstart));
        const maxYear = Math.max(...allYears);

        filteredData.sort((a, b) => a.reignstart - b.reignstart);

        // อัพเดต year labels ตาม minYearSelected
        renderYearLabels(minYearSelected, maxYear);

        const timelineItems = document.createElement('div');
        timelineItems.classList.add('timeline-items');

        const kingdoms = [...new Set(filteredData.map(item => item.kingdomname))];
        kingdoms.forEach((kingdom, index) => {
            const rowDiv = document.createElement('div');
            rowDiv.classList.add('timeline-items');
            rowDiv.style.marginBottom = '80px';
            rowDiv.style.paddingTop = '30px';
            rowDiv.style.position = 'relative';

            const kingdomLabel = document.createElement('div');
            kingdomLabel.classList.add('kingdom-label');
            kingdomLabel.textContent = kingdom;
            kingdomLabel.style.position = 'absolute';
            kingdomLabel.style.left = '0px';
            kingdomLabel.style.top = '50%';
            kingdomLabel.style.transform = 'translateY(-50%)';
            kingdomLabel.style.fontWeight = 'bold';
            kingdomLabel.style.fontSize = '18px';
            kingdomLabel.style.color = '#333';

            rowDiv.appendChild(kingdomLabel);

            const items = filteredData.filter(item => item.kingdomname === kingdom);
            items.forEach(item => {
                const itemDiv = document.createElement('div');
                itemDiv.classList.add('timeline-item');
                itemDiv.style.left = `${getPositionLeft(item.reignstart, minYearSelected)}px`;
                itemDiv.style.width = `${getWidth(item.reignstart, item.reignend)}px`;
                itemDiv.style.backgroundColor = getColorForKingdom(item.kingdomname);

                itemDiv.innerHTML = `
                    <h3>${item.name}</h3>
                    <p>พ.ศ. ${item.reignstart} - พ.ศ. ${item.reignend}</p>
                `;

                itemDiv.addEventListener('mouseenter', () => {
                    itemDiv.style.zIndex = '999';
                });

                itemDiv.addEventListener('mouseleave', () => {
                    itemDiv.style.zIndex = '1';
                });

                rowDiv.appendChild(itemDiv);
            });

            timelineItems.appendChild(rowDiv);
        });

        timelineWrapper.appendChild(timelineItems);
    }

    // Adjust renderYearLabels to start from minYearSelected
    function renderYearLabels(minYear, maxYear) {
        const yearContainer = document.createElement('div');
        yearContainer.classList.add('year-labels');
        yearContainer.style.position = 'relative';
        yearContainer.style.height = '40px';
        yearContainer.style.marginBottom = '20px';

        const yearWidth = 60; // Display each year with 60px width
        for (let year = minYear; year <= maxYear; year += 10) { // Show every 10 years
            const yearDiv = document.createElement('div');
            yearDiv.textContent = `พ.ศ. ${year}`;
            yearDiv.style.position = 'absolute';
            yearDiv.style.left = `${getPositionLeft(year, minYear)}px`;
            yearDiv.style.transform = 'translateX(50%)';
            yearDiv.style.fontWeight = 'bold';
            yearDiv.style.fontSize = '14px';

            yearContainer.appendChild(yearDiv);
        }

        timelineWrapper.appendChild(yearContainer);
    }

    function getPositionLeft(year, minYear) {
        const yearWidth = 150; // Define how wide each year is represented
        return (year - minYear) * yearWidth;
    }

    function getWidth(startYear, endYear) {
        const yearWidth = 150;
        return (endYear - startYear + 1) * yearWidth;
    }

    function getColorForKingdom(kingdom) {
        const colors = [
            "#FFA07A", "#DDA0DD", "#88B04B", "#F5DEB3", "#92A8D1", "#F6C3C1", "#FFCC00",
            "#C39BD3", "#76D7C4", "#F1948A", "#F7DC6F", "#85C1E9", "#D5DBDB", "#48C9B0",
            "#AF7AC5", "#5499C7", "#F0B27A", "#1ABC9C", "#A569BD", "#DC7633"
        ];
        const kingdoms = [...new Set(timelineData.map(item => item.kingdomname))];
        const index = kingdoms.indexOf(kingdom);
        return colors[index % colors.length];
    }

    function debounce(func, delay) {
        let timeout;
        return (...args) => {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), delay);
        };
    }

    renderCheckboxes();
    renderTimeline();
});
    </script>


</body>









<body>
    <header>
        <h1>Timeline</h1>
        <nav>
            <ul>
                <li><a href="index.php">Home</a></li>
                <li><a href="family_tree.php">Family Tree</a></li>
                <li><a href="timeline.php" class="active">Timeline</a></li>
            </ul>
        </nav>
    </header>
    <div class="container">
        <div class="select-all-container">
            <input type="checkbox" id="select-all" checked>
            <label for="select-all">เลือกทั้งหมด</label>
        </div>
        <button id="toggle-zoom">ดูภาพรวม</button>

        <div class="kingdom-filters">
            <!-- Checkboxes for kingdoms will be dynamically generated here -->
        </div>
        <div class="color-legend">
            <!-- Legend will be dynamically generated here -->
        </div>
        <div class="timeline-wrapper" id="timeline-wrapper">
            <!-- Timeline rows will be generated here by JavaScript -->
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const timelineData = <?php echo json_encode($timeline_data); ?>;
            const timelineWrapper = document.getElementById('timeline-wrapper');
            const filterContainer = document.querySelector('.kingdom-filters');
            const colorLegendContainer = document.querySelector('.color-legend');
            const selectAllCheckbox = document.getElementById('select-all');

            let zoomLevel = 1;
            const zoomFactor = 2; // ปรับระดับการซูม
            let isZoomedOut = false; // ตรวจสอบสถานะการซูม
            const toggleZoomButton = document.getElementById('toggle-zoom');

            let minYearSelected, maxYear; // ประกาศตัวแปรเพื่อใช้ร่วมกันในการซูมและแสดง timeline

            toggleZoomButton.addEventListener('click', () => {
                if (isZoomedOut) {
                    // ซูมเข้า (กลับไปดูแบบปกติ)
                    zoomLevel = 1;
                    toggleZoomButton.textContent = 'ดูภาพรวม';
                } else {
                    // ซูมออก (ดูแบบภาพรวม)
                    zoomLevel = 1 / 2; // ใช้ 1/2 แทน 1/200 เพื่อให้ยังมองเห็นได้ชัดเจน
                    toggleZoomButton.textContent = 'ดูแบบปกติ';
                }
                isZoomedOut = !isZoomedOut;
                renderTimeline(); // เรียกใหม่ทุกครั้งที่เปลี่ยนระดับการซูม
                renderYearLabels(minYearSelected, maxYear); // เรียกเพื่อให้ปรับ label ของปีใหม่
            });

            function renderCheckboxes() {
                const kingdoms = [...new Set(timelineData.map(item => item.kingdomname))];
                kingdoms.forEach((kingdom, index) => {
                    const label = document.createElement('label');
                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.value = kingdom;
                    checkbox.checked = true;
                    checkbox.id = `kingdom-${index}`;
                    checkbox.addEventListener('change', debounce(handleCheckboxChange, 300));

                    label.setAttribute('for', checkbox.id);
                    label.appendChild(checkbox);
                    label.appendChild(document.createTextNode(kingdom));
                    filterContainer.appendChild(label);

                    const legendItem = document.createElement('div');
                    legendItem.style.display = 'flex';
                    legendItem.style.alignItems = 'center';
                    legendItem.style.marginRight = '20px';
                    legendItem.style.fontSize = '16px';
                    legendItem.style.fontWeight = 'bold';
                    legendItem.style.textAlign = 'center';
                    legendItem.innerHTML = `
                        <div style="background-color: ${getColorForKingdom(kingdom)}; width: 20px; height: 20px; border-radius: 50%;"></div>
                        <span style="margin-left: 10px;">${kingdom}</span>
                    `;
                    colorLegendContainer.appendChild(legendItem);
                });

                selectAllCheckbox.checked = true;

                selectAllCheckbox.addEventListener('change', (e) => {
                    const isChecked = e.target.checked;
                    document.querySelectorAll('.kingdom-filters input[type=checkbox]').forEach(checkbox => {
                        checkbox.checked = isChecked;
                    });
                    renderTimeline();
                });
            }

            function handleCheckboxChange() {
                const allCheckboxes = document.querySelectorAll('.kingdom-filters input[type=checkbox]');
                const allChecked = Array.from(allCheckboxes).every(checkbox => checkbox.checked);
                selectAllCheckbox.checked = allChecked;

                renderTimeline();
            }

            function renderTimeline() {
                timelineWrapper.innerHTML = '';
                const selectedKingdoms = Array.from(document.querySelectorAll('.kingdom-filters input[type=checkbox]'))
                    .filter(checkbox => checkbox.checked)
                    .map(checkbox => checkbox.value);

                const filteredData = timelineData.filter(item =>
                    item.reignstart !== null && selectedKingdoms.includes(item.kingdomname)
                );

                if (filteredData.length === 0) {
                    return;
                }

                const allYears = filteredData.flatMap(item => [item.reignstart, item.reignend]);
                minYearSelected = Math.min(...filteredData.map(item => item.reignstart));
                maxYear = Math.max(...allYears);

                filteredData.sort((a, b) => a.reignstart - b.reignstart);

                renderYearLabels(minYearSelected, maxYear); // Render ปีใหม่ทุกครั้งที่มีการซูม

                const timelineItems = document.createElement('div');
                timelineItems.classList.add('timeline-items');

                const kingdoms = [...new Set(filteredData.map(item => item.kingdomname))];
                kingdoms.forEach((kingdom, index) => {
                    const rowDiv = document.createElement('div');
                    rowDiv.classList.add('timeline-items');
                    rowDiv.style.marginBottom = '80px';
                    rowDiv.style.paddingTop = '30px';
                    rowDiv.style.position = 'relative';

                    const kingdomLabel = document.createElement('div');
                    kingdomLabel.classList.add('kingdom-label');
                    kingdomLabel.textContent = kingdom;
                    kingdomLabel.style.position = 'absolute';
                    kingdomLabel.style.left = '0px';
                    kingdomLabel.style.top = '50%';
                    kingdomLabel.style.transform = 'translateY(-50%)';
                    kingdomLabel.style.fontWeight = 'bold';
                    kingdomLabel.style.fontSize = '18px';
                    kingdomLabel.style.color = '#333';

                    rowDiv.appendChild(kingdomLabel);

                    const items = filteredData.filter(item => item.kingdomname === kingdom);
                    items.forEach(item => {
                        const itemDiv = document.createElement('div');
                        itemDiv.classList.add('timeline-item');
                        itemDiv.style.left = `${getPositionLeft(item.reignstart, minYearSelected)}px`;
                        itemDiv.style.width = `${getWidth(item.reignstart, item.reignend)}px`;
                        itemDiv.style.backgroundColor = getColorForKingdom(item.kingdomname);

                        itemDiv.innerHTML = `
                            <h3>${item.name}</h3>
                            <p>พ.ศ. ${item.reignstart} - พ.ศ. ${item.reignend}</p>
                        `;

                        itemDiv.addEventListener('mouseenter', () => {
                            itemDiv.style.zIndex = '999';
                        });

                        itemDiv.addEventListener('mouseleave', () => {
                            itemDiv.style.zIndex = '1';
                        });

                        rowDiv.appendChild(itemDiv);
                    });

                    timelineItems.appendChild(rowDiv);
                });

                timelineWrapper.appendChild(timelineItems);
            }

            function renderYearLabels(minYear, maxYear) {
                if (isZoomedOut) {
                    // ถ้าอยู่ในโหมดดูภาพรวม ไม่ต้องแสดง yearlabel
                    return;
                }

                const yearContainer = document.createElement('div');
                yearContainer.classList.add('year-labels');
                yearContainer.style.position = 'relative';
                yearContainer.style.height = '40px';
                yearContainer.style.marginBottom = '20px';

                const yearWidth = 150 * zoomLevel; // ปรับตามระดับการซูม
                for (let year = minYear; year <= maxYear; year += 10) {
                    const yearDiv = document.createElement('div');
                    yearDiv.textContent = `พ.ศ. ${year}`;
                    yearDiv.style.position = 'absolute';
                    yearDiv.style.left = `${getPositionLeft(year, minYear)}px`;
                    yearDiv.style.transform = 'translateX(50%)';
                    yearDiv.style.fontWeight = 'bold';
                    yearDiv.style.fontSize = '14px';

                    yearContainer.appendChild(yearDiv);
                }

                timelineWrapper.appendChild(yearContainer); // เพิ่ม label ใหม่หลังจากลบของเดิม
            }

            function getPositionLeft(year, minYear) {
                const yearWidth = 150 * zoomLevel; // ปรับตามระดับการซูม
                return (year - minYear) * yearWidth;
            }

            function getWidth(startYear, endYear) {
                const yearWidth = 150 * zoomLevel; // ปรับความกว้างตามระดับการซูม
                return (endYear - startYear + 1) * yearWidth;
            }

            function getColorForKingdom(kingdom) {
                const colors = [
                    "#FFA07A", "#DDA0DD", "#88B04B", "#F5DEB3", "#92A8D1", "#F6C3C1", "#FFCC00",
                    "#C39BD3", "#76D7C4", "#F1948A", "#F7DC6F", "#85C1E9", "#D5DBDB", "#48C9B0",
                    "#AF7AC5", "#5499C7", "#F0B27A", "#1ABC9C", "#A569BD", "#DC7633"
                ];
                const kingdoms = [...new Set(timelineData.map(item => item.kingdomname))];
                const index = kingdoms.indexOf(kingdom);
                return colors[index % colors.length];
            }

            function debounce(func, wait) {
                let timeout;
                return function(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func.apply(this, args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }

            renderCheckboxes();
            renderTimeline();
        });
    </script>
</body>
