/* styles.css */

.oval-button {
    background-color: #3498db; /* Blue background */
    border: none;
    color: white;
    padding: 10px 20px; /* More padding */
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    cursor: pointer;
    border-radius: 25px;
    transition: background-color 0.3s, transform 0.3s;
}

.oval-button:hover {
    background-color: #2980b9; /* Darker blue on hover */
    transform: translateY(-2px); /* Slight lift effect */
}

body {
    font-family: Arial, sans-serif;
}

#tree {
    width: 100%;
    height: 85.5vh;
    border: 1px solid #ccc;
}

#controls {
    margin: 10px;
}

header {
    background-color: #d0c18c; /* Match the header background color */
    padding: 10px 20px; /* Add padding to the header */
    display: flex; /* Use flexbox for header layout */
    justify-content: space-between; /* Space out title and nav links */
    align-items: center; /* Center align items vertically */
}

header nav ul {
    list-style-type: none;
    padding: 0;
    display: flex;
    gap: 15px;
    margin: 0; /* Remove default margin */
}

header nav ul li {
    display: inline-block;
}

header nav ul li a {
    text-decoration: none;
    padding: 10px 0; /* Padding for better spacing */
    color: #000; /* Black text */
    font-size: 16px; /* Font size */
    font-weight: bold; /* Bold text for better visibility */
    transition: color 0.3s, text-decoration 0.3s; /* Smooth transition for hover effect */
}

header nav ul li a:hover {
    color: #444; /* Darker grey text on hover */
    text-decoration: underline; /* Underline text on hover */
}

header nav ul li a.active {
    text-decoration: underline; /* Underline text for active page */
}

header h1 {
    color: #000; /* Black text for the header title */
    font-size: 24px; /* Font size for the header title */
    font-weight: bold; /* Bold text for the header title */
    margin: 0; /* Remove default margin */
}

.form-container {
    position: absolute;
    top: 20px;
    right: 20px;
    background: white;
    padding: 10px;
    border-radius: 5px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
    z-index: 1000; /* Ensure the form is on top of the map */
}

.orgchart .node img {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    margin-right: 10px;
}

.node.female rect {
    fill: #fdb0c0;
}

.node.male rect {
    fill: #ADD8E6;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 20px;
    background-color: #f4f4f4;
}

.container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 10px;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
}

.kingdom-filters {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 20px;
}

.kingdom-filters label {
    display: flex;
    align-items: center;
    padding: 10px;
    border-radius: 5px;
    background-color: #f9f9f9;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: background-color 0.3s;
    cursor: pointer;
    user-select: none;
}

.kingdom-filters label:hover {
    background-color: #e2e2e2;
}

.kingdom-filters input[type="checkbox"] {
    margin-right: 8px;
    width: 16px;
    height: 16px;
    accent-color: #3498db;
    cursor: pointer;
}

.select-all-container {
    margin-bottom: 10px;
    display: flex;
    align-items: center;
}

.select-all-container label {
    font-weight: bold;
    margin-left: 8px;
    cursor: pointer;
}

.timeline {
    position: relative;
}

.timeline-item {
    background: #fff;
    padding: 15px;
    margin: 10px 0;
    border-left: 4px solid #3498db;
    position: relative;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
    border-radius: 4px;
    transition: transform 0.3s, box-shadow 0.3s;
}

.timeline-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}

.timeline-item::before {
    content: "";
    position: absolute;
    left: -8px;
    top: 20px;
    width: 12px;
    height: 12px;
    background: #3498db;
    border-radius: 50%;
}

.timeline-item h3 {
    margin: 0 0 5px;
}

.timeline-item p {
    margin: 5px 0 0;
    color: #666;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Horizontal Timeline with Overlapping Rulers</title>
    <style>
        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            color: #333;
        }

        header {
            background-color: #007bff;
            padding: 15px 0;
            color: #ffffff;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            border-bottom: 2px solid #0056b3;
        }

        header h1 {
            margin: 0;
            font-size: 32px;
            font-weight: bold;
        }

        nav ul {
            list-style-type: none;
            padding: 0;
            margin: 15px 0 0 0;
            display: flex;
            justify-content: center;
        }

        nav ul li {
            margin: 0 15px;
        }

        nav ul li a {
            color: #ffffff;
            text-decoration: none;
            font-size: 18px;
            padding: 8px 15px;
            border-radius: 5px;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        nav ul li a:hover,
        nav ul li a.active {
            background-color: #0056b3;
            color: #ffffff;
        }

        .container {
            max-width: 1200px;
            margin: 30px auto;
            padding: 0 20px;
            background-color: #ffffff;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            padding: 20px;
        }

        .select-all-container {
            margin-bottom: 20px;
            display: flex;
            align-items: center;
        }

        .select-all-container input {
            margin-right: 10px;
        }

        .kingdom-filters {
            margin-bottom: 20px;
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
        }

        .kingdom-filters label {
            display: flex;
            align-items: center;
            background-color: #e9ecef;
            padding: 10px 15px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .kingdom-filters input {
            margin-right: 10px;
        }

        .kingdom-filters label:hover {
            background-color: #dee2e6;
        }

        .timeline-wrapper {
            display: flex;
            flex-direction: row;
            overflow-x: auto;
            padding: 20px;
            background-color: #e9ecef;
            border-radius: 10px;
            box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .timeline-group {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            margin-right: 30px; /* Space between kingdoms */
            position: relative;
        }

        .timeline-group .year-label {
            text-align: center;
            margin-bottom: 15px; /* Space between year label and items */
            font-weight: bold;
            color: #4a90e2;
            font-size: 16px;
            text-transform: uppercase;
            width: 80px; /* Fixed width for year label */
        }

        .timeline-items {
            display: flex;
            flex-direction: column; /* Ensure items are arranged top to bottom */
            gap: 15px;
        }

        .timeline-item {
            position: relative;
            padding: 15px;
            border: 1px solid #ced4da;
            border-radius: 8px;
            background-color: #ffffff;
            text-align: center;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease-in-out;
            white-space: nowrap; /* Ensure text does not wrap */
            min-width: 200px; /* Minimum width for readability */
        }

        .timeline-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        .timeline-item h3 {
            margin: 0 0 10px 0;
            font-size: 18px;
            color: #333;
        }

        .timeline-item p {
            margin: 5px 0;
            font-size: 14px;
            color: #6c757d;
        }

        .timeline-item p:last-child {
            font-weight: bold;
            color: #007bff;
        }
    </style>
</head>
<body>
    <header>
        <h1>Timeline</h1>
        <nav>
            <ul>
                <li><a href="index.php">Home</a></li>
                <li><a href="family_tree.php">Family Tree</a></li>
                <li><a href="timeline.php" class="active">Timeline</a></li>
            </ul>
        </nav>
    </header>
    <div class="container">
        <div class="select-all-container">
            <input type="checkbox" id="select-all">
            <label for="select-all">Select All</label>
        </div>
        <div class="kingdom-filters">
            <!-- Checkboxes for kingdoms will be dynamically generated here -->
        </div>
        <div class="timeline-wrapper" id="timeline-wrapper">
            <!-- Timeline items will be generated here by JavaScript -->
        </div>
    </div>

    <script>
        const timelineData = <?php echo json_encode($timeline_data); ?>;
        const timelineWrapper = document.getElementById('timeline-wrapper');
        const filterContainer = document.querySelector('.kingdom-filters');

        function renderCheckboxes() {
            const kingdoms = [...new Set(timelineData.map(item => item.kingdomname))];
            kingdoms.forEach(kingdom => {
                const label = document.createElement('label');
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.value = kingdom;
                checkbox.checked = true;
                checkbox.addEventListener('change', renderTimeline);
                label.appendChild(checkbox);
                label.appendChild(document.createTextNode(kingdom));
                filterContainer.appendChild(label);
            });

            // Add select all checkbox functionality
            document.getElementById('select-all').addEventListener('change', (e) => {
                const isChecked = e.target.checked;
                document.querySelectorAll('.kingdom-filters input[type=checkbox]').forEach(checkbox => {
                    checkbox.checked = isChecked;
                });
                renderTimeline();
            });
        }

        function renderTimeline() {
            // Clear the current timeline
            timelineWrapper.innerHTML = '';

            // Get selected kingdoms
            const selectedKingdoms = [...filterContainer.querySelectorAll('input[type=checkbox]:not(#select-all)')]
                .filter(checkbox => checkbox.checked)
                .map(checkbox => checkbox.value);

            // Filter data based on selected kingdoms and reign start year
            const filteredData = timelineData.filter(item =>
                item.reignstart !== null && selectedKingdoms.includes(item.kingdomname)
            );

            // Group data by reign start year and kingdom
            const groupedData = {};
            filteredData.forEach(item => {
                const startYear = item.reignstart;
                const kingdom = item.kingdomname;

                if (!groupedData[startYear]) {
                    groupedData[startYear] = {};
                }

                if (!groupedData[startYear][kingdom]) {
                    groupedData[startYear][kingdom] = [];
                }

                groupedData[startYear][kingdom].push(item);
            });

            // Determine the total range of years for scaling purposes
            const allYears = filteredData.flatMap(item => [item.reignstart, item.reignend]);
            const minYear = Math.min(...allYears);
            const maxYear = Math.max(...allYears);

            // Generate timeline elements
            Object.keys(groupedData).forEach(year => {
                const kingdoms = groupedData[year];
                const groupDiv = document.createElement('div');
                groupDiv.classList.add('timeline-group');

                // Add the year label
                const yearLabel = document.createElement('div');
                yearLabel.classList.add('year-label');
                yearLabel.innerText = `พ.ศ. ${year}`;
                groupDiv.appendChild(yearLabel);

                // Add a container for timeline items
                Object.keys(kingdoms).forEach(kingdom => {
                    const items = kingdoms[kingdom];
                    const itemsDiv = document.createElement('div');
                    itemsDiv.classList.add('timeline-items');

                    // Add ruler items
                    items.forEach(item => {
                        const itemDiv = document.createElement('div');
                        itemDiv.classList.add('timeline-item');

                        // Calculate the width based on the duration
                        const duration = item.reignend - item.reignstart;
                        const totalYears = maxYear - minYear;
                        const widthPercentage = (duration / totalYears) * 100;

                        itemDiv.style.width = `${widthPercentage}%`;

                        itemDiv.innerHTML = 
                            `<h3>${item.name}</h3>
                            <p>${item.kingdomname}</p>
                            <p>ปกครอง : พ.ศ. ${item.reignstart} - พ.ศ. ${item.reignend}</p>
                            <p>ราชวงศ์ : ${item.monarch}</p>`;

                        itemsDiv.appendChild(itemDiv);
                    });

                    groupDiv.appendChild(itemsDiv);
                });

                timelineWrapper.appendChild(groupDiv);
            });
        }

        // Initial render
        renderCheckboxes();
        renderTimeline();
    </script>
</body>
</html>





